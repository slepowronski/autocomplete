[{"/Users/slepowronski/Dev/Projects/autocomplete/src/index.tsx":"1","/Users/slepowronski/Dev/Projects/autocomplete/src/reportWebVitals.ts":"2","/Users/slepowronski/Dev/Projects/autocomplete/src/App.tsx":"3","/Users/slepowronski/Dev/Projects/autocomplete/src/components/autocomplete/autocomplete.component.tsx":"4","/Users/slepowronski/Dev/Projects/autocomplete/src/services/parseQuery.service.ts":"5","/Users/slepowronski/Dev/Projects/autocomplete/src/KeyValueResultVisitor.ts":"6","/Users/slepowronski/Dev/Projects/autocomplete/src/grammar/KeyValueParser.ts":"7","/Users/slepowronski/Dev/Projects/autocomplete/src/grammar/KeyValueLexer.ts":"8","/Users/slepowronski/Dev/Projects/autocomplete/src/hooks/usePrevious.hook.ts":"9","/Users/slepowronski/Dev/Projects/autocomplete/src/services/suggestionsNetwork.service.ts":"10"},{"size":500,"mtime":1608553513623,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1608553513624,"results":"13","hashOfConfig":"12"},{"size":194,"mtime":1609859638869,"results":"14","hashOfConfig":"12"},{"size":3774,"mtime":1609859638870,"results":"15","hashOfConfig":"12"},{"size":966,"mtime":1609860168091,"results":"16","hashOfConfig":"12"},{"size":3353,"mtime":1609859638869,"results":"17","hashOfConfig":"12"},{"size":10674,"mtime":1609859638872,"results":"18","hashOfConfig":"12"},{"size":3068,"mtime":1609859638872,"results":"19","hashOfConfig":"12"},{"size":244,"mtime":1609859638873,"results":"20","hashOfConfig":"12"},{"size":609,"mtime":1609859638873,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"12lp8x9",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/slepowronski/Dev/Projects/autocomplete/src/index.tsx",[],["45","46"],"/Users/slepowronski/Dev/Projects/autocomplete/src/reportWebVitals.ts",[],"/Users/slepowronski/Dev/Projects/autocomplete/src/App.tsx",[],"/Users/slepowronski/Dev/Projects/autocomplete/src/components/autocomplete/autocomplete.component.tsx",[],"/Users/slepowronski/Dev/Projects/autocomplete/src/services/parseQuery.service.ts",[],"/Users/slepowronski/Dev/Projects/autocomplete/src/KeyValueResultVisitor.ts",[],"/Users/slepowronski/Dev/Projects/autocomplete/src/grammar/KeyValueParser.ts",["47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64"],"// Generated from ./src/grammar/KeyValue.g4 by ANTLR 4.7.3-SNAPSHOT\n\n// @ts-nocheck\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { FailedPredicateException } from \"antlr4ts/FailedPredicateException\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { Parser } from \"antlr4ts/Parser\";\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext\";\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator\";\nimport { ParseTreeListener } from \"antlr4ts/tree/ParseTreeListener\";\nimport { ParseTreeVisitor } from \"antlr4ts/tree/ParseTreeVisitor\";\nimport { RecognitionException } from \"antlr4ts/RecognitionException\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\nimport { Token } from \"antlr4ts/Token\";\nimport { TokenStream } from \"antlr4ts/TokenStream\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\nimport { KeyValueListener } from \"./KeyValueListener\";\nimport { KeyValueVisitor } from \"./KeyValueVisitor\";\n\n\nexport class KeyValueParser extends Parser {\n\tpublic static readonly ALPHANUMERIC = 1;\n\tpublic static readonly EQ = 2;\n\tpublic static readonly RULE_expression = 0;\n\tpublic static readonly RULE_keyValueExpression = 1;\n\tpublic static readonly RULE_key = 2;\n\tpublic static readonly RULE_value = 3;\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"expression\", \"keyValueExpression\", \"key\", \"value\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, undefined, \"'='\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"ALPHANUMERIC\", \"EQ\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(KeyValueParser._LITERAL_NAMES, KeyValueParser._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn KeyValueParser.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"KeyValue.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return KeyValueParser.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return KeyValueParser._serializedATN; }\n\n\tconstructor(input: TokenStream) {\n\t\tsuper(input);\n\t\tthis._interp = new ParserATNSimulator(KeyValueParser._ATN, this);\n\t}\n\t// @RuleVersion(0)\n\tpublic expression(): ExpressionContext {\n\t\tlet _localctx: ExpressionContext = new ExpressionContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 0, KeyValueParser.RULE_expression);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 10;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 0, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t{\n\t\t\t\tthis.state = 8;\n\t\t\t\tthis.key();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t{\n\t\t\t\tthis.state = 9;\n\t\t\t\tthis.keyValueExpression();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.state = 12;\n\t\t\tthis.match(KeyValueParser.EOF);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic keyValueExpression(): KeyValueExpressionContext {\n\t\tlet _localctx: KeyValueExpressionContext = new KeyValueExpressionContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 2, KeyValueParser.RULE_keyValueExpression);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 14;\n\t\t\tthis.key();\n\t\t\tthis.state = 15;\n\t\t\tthis.match(KeyValueParser.EQ);\n\t\t\tthis.state = 16;\n\t\t\tthis.value();\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic key(): KeyContext {\n\t\tlet _localctx: KeyContext = new KeyContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 4, KeyValueParser.RULE_key);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 18;\n\t\t\tthis.match(KeyValueParser.ALPHANUMERIC);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic value(): ValueContext {\n\t\tlet _localctx: ValueContext = new ValueContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 6, KeyValueParser.RULE_value);\n\t\ttry {\n\t\t\tthis.state = 22;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch (this._input.LA(1)) {\n\t\t\tcase KeyValueParser.ALPHANUMERIC:\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 20;\n\t\t\t\tthis.match(KeyValueParser.ALPHANUMERIC);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase KeyValueParser.EOF:\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t// tslint:disable-next-line:no-empty\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new NoViableAltException(this);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03\\x04\\x1B\\x04\\x02\" +\n\t\t\"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x03\\x02\\x03\\x02\\x05\\x02\" +\n\t\t\"\\r\\n\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\" +\n\t\t\"\\x03\\x05\\x03\\x05\\x05\\x05\\x19\\n\\x05\\x03\\x05\\x02\\x02\\x02\\x06\\x02\\x02\\x04\" +\n\t\t\"\\x02\\x06\\x02\\b\\x02\\x02\\x02\\x02\\x18\\x02\\f\\x03\\x02\\x02\\x02\\x04\\x10\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x06\\x14\\x03\\x02\\x02\\x02\\b\\x18\\x03\\x02\\x02\\x02\\n\\r\\x05\\x06\\x04\" +\n\t\t\"\\x02\\v\\r\\x05\\x04\\x03\\x02\\f\\n\\x03\\x02\\x02\\x02\\f\\v\\x03\\x02\\x02\\x02\\r\\x0E\" +\n\t\t\"\\x03\\x02\\x02\\x02\\x0E\\x0F\\x07\\x02\\x02\\x03\\x0F\\x03\\x03\\x02\\x02\\x02\\x10\\x11\" +\n\t\t\"\\x05\\x06\\x04\\x02\\x11\\x12\\x07\\x04\\x02\\x02\\x12\\x13\\x05\\b\\x05\\x02\\x13\\x05\" +\n\t\t\"\\x03\\x02\\x02\\x02\\x14\\x15\\x07\\x03\\x02\\x02\\x15\\x07\\x03\\x02\\x02\\x02\\x16\\x19\" +\n\t\t\"\\x07\\x03\\x02\\x02\\x17\\x19\\x03\\x02\\x02\\x02\\x18\\x16\\x03\\x02\\x02\\x02\\x18\\x17\" +\n\t\t\"\\x03\\x02\\x02\\x02\\x19\\t\\x03\\x02\\x02\\x02\\x04\\f\\x18\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!KeyValueParser.__ATN) {\n\t\t\tKeyValueParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(KeyValueParser._serializedATN));\n\t\t}\n\n\t\treturn KeyValueParser.__ATN;\n\t}\n\n}\n\nexport class ExpressionContext extends ParserRuleContext {\n\tpublic EOF(): TerminalNode { return this.getToken(KeyValueParser.EOF, 0); }\n\tpublic key(): KeyContext | undefined {\n\t\treturn this.tryGetRuleContext(0, KeyContext);\n\t}\n\tpublic keyValueExpression(): KeyValueExpressionContext | undefined {\n\t\treturn this.tryGetRuleContext(0, KeyValueExpressionContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return KeyValueParser.RULE_expression; }\n\t// @Override\n\tpublic enterRule(listener: KeyValueListener): void {\n\t\tif (listener.enterExpression) {\n\t\t\tlistener.enterExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: KeyValueListener): void {\n\t\tif (listener.exitExpression) {\n\t\t\tlistener.exitExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: KeyValueVisitor<Result>): Result {\n\t\tif (visitor.visitExpression) {\n\t\t\treturn visitor.visitExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class KeyValueExpressionContext extends ParserRuleContext {\n\tpublic key(): KeyContext {\n\t\treturn this.getRuleContext(0, KeyContext);\n\t}\n\tpublic EQ(): TerminalNode { return this.getToken(KeyValueParser.EQ, 0); }\n\tpublic value(): ValueContext {\n\t\treturn this.getRuleContext(0, ValueContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return KeyValueParser.RULE_keyValueExpression; }\n\t// @Override\n\tpublic enterRule(listener: KeyValueListener): void {\n\t\tif (listener.enterKeyValueExpression) {\n\t\t\tlistener.enterKeyValueExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: KeyValueListener): void {\n\t\tif (listener.exitKeyValueExpression) {\n\t\t\tlistener.exitKeyValueExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: KeyValueVisitor<Result>): Result {\n\t\tif (visitor.visitKeyValueExpression) {\n\t\t\treturn visitor.visitKeyValueExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class KeyContext extends ParserRuleContext {\n\tpublic ALPHANUMERIC(): TerminalNode { return this.getToken(KeyValueParser.ALPHANUMERIC, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return KeyValueParser.RULE_key; }\n\t// @Override\n\tpublic enterRule(listener: KeyValueListener): void {\n\t\tif (listener.enterKey) {\n\t\t\tlistener.enterKey(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: KeyValueListener): void {\n\t\tif (listener.exitKey) {\n\t\t\tlistener.exitKey(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: KeyValueVisitor<Result>): Result {\n\t\tif (visitor.visitKey) {\n\t\t\treturn visitor.visitKey(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ValueContext extends ParserRuleContext {\n\tpublic ALPHANUMERIC(): TerminalNode | undefined { return this.tryGetToken(KeyValueParser.ALPHANUMERIC, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return KeyValueParser.RULE_value; }\n\t// @Override\n\tpublic enterRule(listener: KeyValueListener): void {\n\t\tif (listener.enterValue) {\n\t\t\tlistener.enterValue(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: KeyValueListener): void {\n\t\tif (listener.exitValue) {\n\t\t\tlistener.exitValue(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: KeyValueVisitor<Result>): Result {\n\t\tif (visitor.visitValue) {\n\t\t\treturn visitor.visitValue(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\n","/Users/slepowronski/Dev/Projects/autocomplete/src/grammar/KeyValueLexer.ts",["65","66","67"],"// Generated from ./src/grammar/KeyValue.g4 by ANTLR 4.7.3-SNAPSHOT\n\n// @ts-nocheck\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { CharStream } from \"antlr4ts/CharStream\";\nimport { Lexer } from \"antlr4ts/Lexer\";\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\n\nexport class KeyValueLexer extends Lexer {\n\tpublic static readonly ALPHANUMERIC = 1;\n\tpublic static readonly EQ = 2;\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t];\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly modeNames: string[] = [\n\t\t\"DEFAULT_MODE\",\n\t];\n\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"ALPHANUMERIC\", \"EQ\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, undefined, \"'='\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"ALPHANUMERIC\", \"EQ\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(KeyValueLexer._LITERAL_NAMES, KeyValueLexer._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn KeyValueLexer.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\n\tconstructor(input: CharStream) {\n\t\tsuper(input);\n\t\tthis._interp = new LexerATNSimulator(KeyValueLexer._ATN, this);\n\t}\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"KeyValue.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return KeyValueLexer.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return KeyValueLexer._serializedATN; }\n\n\t// @Override\n\tpublic get channelNames(): string[] { return KeyValueLexer.channelNames; }\n\n\t// @Override\n\tpublic get modeNames(): string[] { return KeyValueLexer.modeNames; }\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x04\\x10\\b\\x01\" +\n\t\t\"\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x03\\x02\\x03\\x02\\x07\\x02\\n\\n\\x02\\f\\x02\\x0E\" +\n\t\t\"\\x02\\r\\v\\x02\\x03\\x03\\x03\\x03\\x02\\x02\\x02\\x04\\x03\\x02\\x03\\x05\\x02\\x04\\x03\" +\n\t\t\"\\x02\\x04\\x04\\x02C\\\\c|\\x05\\x022;C\\\\c|\\x02\\x10\\x02\\x03\\x03\\x02\\x02\\x02\\x02\" +\n\t\t\"\\x05\\x03\\x02\\x02\\x02\\x03\\x07\\x03\\x02\\x02\\x02\\x05\\x0E\\x03\\x02\\x02\\x02\\x07\" +\n\t\t\"\\v\\t\\x02\\x02\\x02\\b\\n\\t\\x03\\x02\\x02\\t\\b\\x03\\x02\\x02\\x02\\n\\r\\x03\\x02\\x02\" +\n\t\t\"\\x02\\v\\t\\x03\\x02\\x02\\x02\\v\\f\\x03\\x02\\x02\\x02\\f\\x04\\x03\\x02\\x02\\x02\\r\\v\" +\n\t\t\"\\x03\\x02\\x02\\x02\\x0E\\x0F\\x07?\\x02\\x02\\x0F\\x06\\x03\\x02\\x02\\x02\\x04\\x02\" +\n\t\t\"\\v\\x02\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!KeyValueLexer.__ATN) {\n\t\t\tKeyValueLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(KeyValueLexer._serializedATN));\n\t\t}\n\n\t\treturn KeyValueLexer.__ATN;\n\t}\n\n}\n\n","/Users/slepowronski/Dev/Projects/autocomplete/src/hooks/usePrevious.hook.ts",[],"/Users/slepowronski/Dev/Projects/autocomplete/src/services/suggestionsNetwork.service.ts",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":7,"column":10,"nodeType":"74","messageId":"75","endLine":7,"endColumn":34},{"ruleId":"72","severity":1,"message":"76","line":8,"column":10,"nodeType":"74","messageId":"75","endLine":8,"endColumn":17},{"ruleId":"72","severity":1,"message":"77","line":10,"column":10,"nodeType":"74","messageId":"75","endLine":10,"endColumn":18},{"ruleId":"72","severity":1,"message":"78","line":14,"column":10,"nodeType":"74","messageId":"75","endLine":14,"endColumn":27},{"ruleId":"72","severity":1,"message":"79","line":15,"column":10,"nodeType":"74","messageId":"75","endLine":15,"endColumn":26},{"ruleId":"72","severity":1,"message":"80","line":17,"column":10,"nodeType":"74","messageId":"75","endLine":17,"endColumn":21},{"ruleId":"72","severity":1,"message":"81","line":20,"column":10,"nodeType":"74","messageId":"75","endLine":20,"endColumn":15},{"ruleId":"82","severity":1,"message":"83","line":77,"column":4,"nodeType":"84","messageId":"85","endLine":97,"endColumn":5},{"ruleId":"82","severity":1,"message":"86","line":82,"column":5,"nodeType":"84","messageId":"87","endLine":85,"endColumn":6},{"ruleId":"82","severity":1,"message":"86","line":89,"column":5,"nodeType":"84","messageId":"87","endLine":92,"endColumn":6},{"ruleId":"82","severity":1,"message":"83","line":119,"column":4,"nodeType":"84","messageId":"85","endLine":126,"endColumn":5},{"ruleId":"82","severity":1,"message":"83","line":148,"column":4,"nodeType":"84","messageId":"85","endLine":151,"endColumn":5},{"ruleId":"82","severity":1,"message":"86","line":177,"column":5,"nodeType":"84","messageId":"87","endLine":180,"endColumn":6},{"ruleId":"82","severity":1,"message":"86","line":185,"column":5,"nodeType":"84","messageId":"87","endLine":186,"endColumn":6},{"ruleId":"88","severity":1,"message":"89","line":239,"column":2,"nodeType":"90","messageId":"91","endLine":241,"endColumn":3},{"ruleId":"88","severity":1,"message":"89","line":275,"column":2,"nodeType":"90","messageId":"91","endLine":277,"endColumn":3},{"ruleId":"88","severity":1,"message":"89","line":305,"column":2,"nodeType":"90","messageId":"91","endLine":307,"endColumn":3},{"ruleId":"88","severity":1,"message":"89","line":335,"column":2,"nodeType":"90","messageId":"91","endLine":337,"endColumn":3},{"ruleId":"72","severity":1,"message":"76","line":10,"column":10,"nodeType":"74","messageId":"75","endLine":10,"endColumn":17},{"ruleId":"72","severity":1,"message":"77","line":11,"column":10,"nodeType":"74","messageId":"75","endLine":11,"endColumn":18},{"ruleId":"72","severity":1,"message":"80","line":12,"column":10,"nodeType":"74","messageId":"75","endLine":12,"endColumn":21},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"@typescript-eslint/no-unused-vars","'FailedPredicateException' is defined but never used.","Identifier","unusedVar","'NotNull' is defined but never used.","'Override' is defined but never used.","'ParseTreeListener' is defined but never used.","'ParseTreeVisitor' is defined but never used.","'RuleContext' is defined but never used.","'Token' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Block is redundant.","redundantBlock","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]